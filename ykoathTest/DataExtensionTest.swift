import XCTest
@testable import ykoath

final class DataExtensionTest: XCTestCase {
    func testRandomGenerator() {
        let randomSize = 100
        let dataSize = 1000
        var randomData = [Data]()

        // generate some random data
        for _ in 0 ..< randomSize {
            randomData.append(Data.random(length: dataSize))
        }

        // no same-data
        for i in 1 ..< randomSize - 1 {
            XCTAssertNotEqual(randomData[i - 1], randomData[i])
        }

        // no equal sequences in arrays
        let chunkSize = 10
        for i in 0 ..< randomSize {
            for j in 2 ..< dataSize / chunkSize {
                let range = (j - 2) * chunkSize ..< (j - 1) * chunkSize
                let nextRange = (j - 1) * chunkSize ..< j * chunkSize
                XCTAssertNotEqual(
                    randomData[i].subdata(in: range),
                    randomData[i].subdata(in: nextRange)
                )
            }
        }
    }

    func testTimeChallenge() {
        let challenge = Data.timeChallenge(date: Date(timeIntervalSince1970: 1262401445))
        let expected = Data([0x0, 0x0, 0x0, 0x0, 0x02, 0x82, 0x17, 0x30])
        XCTAssertEqual(expected, challenge)
    }

    func testHexConversion() {
        let expectedData = Data([
            0x0, 0x1, 0x2, 0x3,
            0x4, 0x5, 0x6, 0x7,
            0x8, 0x9, 0xa, 0xb,
            0xc, 0xd, 0xe, 0xf
        ])
        let hexString = "000102030405060708090a0b0c0d0e0f"
        let fromHex = Data(hexString: hexString)

        XCTAssertEqual(expectedData, fromHex)
        XCTAssertEqual(hexString, expectedData.hexString())
    }

    func testHMAC() {
        let data = Data([
            0x36, 0xc4, 0x96, 0xcc, 0x8e,
            0x21, 0x15, 0xc3, 0xa5, 0x6e,
            0xc3, 0x55, 0x84, 0xaf, 0x0d,
            0x7f, 0x36, 0x9b, 0x67, 0x37,
            0x6e, 0x20, 0x54, 0x7e, 0x11,
            0xf2, 0x00, 0x11, 0x00, 0x06,
            0xc4, 0xfd, 0x5f, 0xae, 0xa1,
            0x77, 0xcd, 0x1c, 0xd7, 0xd3,
            0xba, 0x29, 0xba, 0x95, 0x8b,
            0x8e, 0x0a, 0x03, 0xdc, 0x61,
            0xeb, 0xa4, 0x52, 0xaf, 0x04,
            0x1c, 0x32, 0xf5, 0xf4, 0xb3,
            0xab, 0x17, 0x15, 0x9c, 0x11,
            0x3f, 0xb0, 0xec, 0xe4, 0xd7,
            0x41, 0xd0, 0xd6, 0x9e, 0x91,
            0xe8, 0x7c, 0x82, 0x1f, 0x7c,
            0xec, 0x89, 0x6a, 0x0f, 0xfe,
            0x29, 0xb4, 0xe8, 0x79, 0x08,
            0x08, 0xaf, 0x19, 0x3d, 0xbf,
            0x04, 0xdd, 0xbe, 0x83, 0x1e
        ])

        let key = Data([
            0xbf, 0x11, 0x6c, 0xd6,
            0xc8, 0x3e, 0xa7, 0xdb,
            0x80, 0x43, 0xa1, 0x1b,
            0x54, 0x3d, 0xd9, 0xc3,
            0x17, 0x46, 0xeb, 0xd4,
            0x01, 0xe1, 0x2f, 0xe0
        ])

        let expectedMD5 = Data([
            0x82, 0x0e, 0x20, 0x32,
            0x10, 0xec, 0xe5, 0x94,
            0x10, 0xce, 0x0a, 0xc4,
            0xd7, 0x57, 0x96, 0x05
        ])
        let expectedSHA1 = Data([
            0xd6, 0xcf, 0x76, 0x7e,
            0xa3, 0xa3, 0xd5, 0x43, 
            0x5b, 0x14, 0x4e, 0x9f,
            0xfd, 0x74, 0xe6, 0x5f,
            0x38, 0x78, 0x78, 0x93
        ])
        let expectedSHA224 = Data([
            0xc6, 0x18, 0xc1, 0x6d,
            0xc2, 0x2d, 0x55, 0x6b,
            0xbb, 0x76, 0x69, 0x71,
            0x92, 0xd8, 0x51, 0xc4,
            0x6a, 0xf0, 0x03, 0xbe,
            0x54, 0xb1, 0xd3, 0x1a,
            0x91, 0x40, 0x82, 0xa6
        ])
        let expectedSHA256 = Data([
            0xa4, 0x83, 0x96, 0xe7,
            0xd9, 0xd7, 0xbb, 0xdc,
            0x18, 0x1f, 0xb4, 0x9c,
            0xcf, 0x52, 0xc2, 0xfd,
            0x29, 0xc7, 0x69, 0xc8,
            0x30, 0xf5, 0x20, 0x34,
            0xf7, 0x70, 0x9b, 0x2a,
            0x98, 0x8c, 0xd1, 0xaa
        ])
        let expectedSHA384 = Data([
            0x46, 0x2f, 0xd6, 0x7a,
            0xbb, 0x61, 0xc8, 0x1f,
            0x56, 0x05, 0x1a, 0xb7,
            0x3f, 0xa8, 0x20, 0xf6,
            0x2d, 0x39, 0x15, 0xf0,
            0xc6, 0x08, 0x19, 0xfe,
            0x26, 0x50, 0xc0, 0x97,
            0xf1, 0xea, 0x0d, 0x96,
            0xbd, 0x1d, 0x17, 0x8a,
            0x30, 0x36, 0x8b, 0xac,
            0x4f, 0x93, 0x9e, 0xdf,
            0x59, 0x85, 0xc4, 0x5a
        ])
        let expectedSHA512 = Data([
            0x5d, 0xa5, 0x4c, 0x48,
            0xc7, 0x5c, 0x92, 0xbb,
            0xaa, 0xde, 0xc9, 0xb0,
            0xf2, 0xa8, 0x21, 0x20,
            0x73, 0x8d, 0xa6, 0x2d,
            0xce, 0xdc, 0x08, 0x8e,
            0x0d, 0xc8, 0x9a, 0xf9,
            0x96, 0x68, 0x12, 0xaf,
            0x66, 0xe9, 0x3c, 0x87,
            0xe5, 0x5a, 0xbb, 0x2a,
            0x82, 0x87, 0x4f, 0xf3,
            0x87, 0xfa, 0xae, 0xe1,
            0xa2, 0x9f, 0x73, 0xbe,
            0x8f, 0xb0, 0x20, 0x2a,
            0x3e, 0xcb, 0x29, 0xd1,
            0x6e, 0x48, 0x85, 0x8b
        ])

        XCTAssertEqual(expectedMD5, data.hmac(withKey: key, using: .MD5))
        XCTAssertEqual(expectedSHA1, data.hmac(withKey: key, using: .SHA1))
        XCTAssertEqual(expectedSHA224, data.hmac(withKey: key, using: .SHA224))
        XCTAssertEqual(expectedSHA256, data.hmac(withKey: key, using: .SHA256))
        XCTAssertEqual(expectedSHA384, data.hmac(withKey: key, using: .SHA384))
        XCTAssertEqual(expectedSHA512, data.hmac(withKey: key, using: .SHA512))
    }
}
